#  Copyright 2022 The Neursafe FL Authors. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0

"""To read and write metrics in task workspace.
"""

import os

import numpy
from absl import logging

from neursafe_fl.python.utils.file_io import read_json_file, write_json_file


_METRICS_FILE_NAME = "metrics.json"


def write_metrics(workspace, metrics):
    """Write metrics to task workspace.

    Args:
        workspace: The path where saved temporary files generated by task
        metrics: Supported metric:
            sample_num: Int, the sample num when train or evaluate.
            spend_time: Int, train or evaluate time spend,
                recommend unit second
            loss: Float.
            accuracy: Float.
            precision: Float.
            recall_rate: Float.
    """
    predefined = {
        'sample_num': int,
        'spend_time': int,
        'loss': float,
        'accuracy': float,
        'precision': float,
        'recall_rate': float
    }

    for key, value in metrics.items():
        if key in predefined:
            if not isinstance(value, predefined[key]):
                logging.warning('Metric key:%s must be type:%s',
                                key, predefined[key])

            if isinstance(value, numpy.float32):
                # because of 'typeError: Object of type float32 is not JSON
                # serializable' when json.dumps, so set float32 to float64
                metrics[key] = numpy.float64(value)
        else:
            logging.warning('Not support metric key:%s, supported: %s',
                            key, list(predefined.keys()))

    metric_file = os.path.join(workspace, _METRICS_FILE_NAME)
    write_json_file(metric_file, metrics)


def read_metrics(workspace):
    """Read metrics in task workspace.

    Args:
        workspace: Task's workspace.

    Return:
        A dict, read from metrics file in task workspace.
    """
    metric_file = os.path.join(workspace, _METRICS_FILE_NAME)
    if not os.path.exists(metric_file):
        return {}

    return read_json_file(metric_file)


def has_metrics_result(workspace):
    """Has metrics result in task workspace.

    Args:
        workspace: Task's workspace.

    Return:
        If has metrics file in task workspace, return True, else False.
    """
    metric_file = os.path.join(workspace, _METRICS_FILE_NAME)
    return os.path.exists(metric_file)
