#  Copyright 2022 The Neursafe FL Authors. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0

"""Used to save and read the model/weights under the task workspace,
including the initial weights from server and the result model/weights
after task finished.
"""

import os
from neursafe_fl.python.runtime.runtime_factory import Runtime, RuntimeFactory


_INIT_WEIGHTS_FILE_NAME = 'init_weights'
_TRAINED_MODEL_FILE_NAME = 'trained_model'
_TRAINED_WEIGHTS_FILE_NAME = 'trained_weights'
_DELTA_WEIGHT_FILE_NAME = 'delta_weights'

_SUFFIX_MAP = {
    'tensorflow': '.h5',
    'pytorch': '.pth',
    Runtime.TENSORFLOW: '.h5',
    Runtime.PYTORCH: '.pth'
}


def get_init_weight_file_name(runtime, workspace):
    """Get init weight file name in task workspace.

    Args:
        runtime: One of enum(tensorflow, pytorch).
        workspace: Task's workspace.

    Return:
        The init weight file path, which saved init weights from server.
    """
    return os.path.join(workspace,
                        _INIT_WEIGHTS_FILE_NAME + _SUFFIX_MAP[runtime])


def get_trained_weights_file_name(runtime, workspace):
    """Get trained weights file name in task workspace.

    Used in pytorch runtime. In pytorch, the client needs to know the trained
    weights and init weights from server to calculate delta weights. Because
    in pytorch, the client cannot load the trained model without know the model
    class and the client is hard to know the model class.

    Args:
        runtime: One of enum(tensorflow, pytorch).
        workspace: Task's workspace.

    Return:
        The trained weight file path, which saved trained weights
        after task finish.
    """
    return os.path.join(workspace,
                        _TRAINED_WEIGHTS_FILE_NAME + _SUFFIX_MAP[runtime])


def get_trained_model_file_name(runtime, workspace):
    """Get trained model file in task workspace.

    Used tensorflow runtime. In tensorflow, the client needs to know the trained
    model(include trained weights) and init weights from server to calculate
    delta weights. Because the client cannot load the trained weights without
    know the model in tensorflow.

    Args:
        runtime: One of enum(tensorflow, pytorch).
        workspace: Task's workspace.

    Return:
        The trained model file path, which saved trained model
        after task finish.
    """
    return os.path.join(workspace,
                        _TRAINED_MODEL_FILE_NAME + _SUFFIX_MAP[runtime])


def load_init_weights(model, runtime, workspace):
    """Load init weights into model and cache init weights.

    Args:
        model: The weights will be loaded into model.
        runtime: One of enum(tensorflow, pytorch).
        workspace: Task's workspace.

    Return:
        The fl model.
    """
    weights_file_name = get_init_weight_file_name(runtime, workspace)
    fl_model = RuntimeFactory.create_model(runtime, model=model)
    fl_model.load(weights_file_name, load_type='weights',
                  return_type='weights')
    fl_model.cache_init_weights(weights_file_name)

    return fl_model


def calculate_delta_weights(fl_model, runtime):
    """Calculate delta weights after task finish.

    In tensorflow runtime, used trained_model and init_weights to calculate
    delta weights. In pytorch runtime, used trained_weights and init_weights
    to calculate delta weights.

    Args:
        fl_model:generated by runtime, used to load weights.
        runtime: One of enum(tensorflow, pytorch).

    Return:
        The delta weights. In pytorch, is a OrderedDict, In tensorflow, is list.
    """

    trained_weights = fl_model.weights
    init_weights = fl_model.init_weights

    return __cal_delta_weights(runtime, trained_weights, init_weights)


def __cal_delta_weights(runtime, trained_weights, init_weights):
    calculator = RuntimeFactory.create_weights_calculator(runtime)
    return calculator.subtract(trained_weights, init_weights)
